shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
max_proj <- filter(data_projects, totalCost == max(mpg))%>%
select(rcn, id, acronym, status, programme, topics, frameworkProgramme, title, startDate,
endDate, projectUrl, objective, totalCost,
ecMaxContribution, call, fundingScheme,
coordinator, coordinatorCountry, participants,
participantCountries, subjects)
proj$totalCost <- sub(",", ".", proj$totalCost)
proj$totalCost <- as.numeric(proj$totalCost)
proj$ecMaxContribution <- sub(",", ".", proj$ecMaxContribution)
proj$ecMaxContribution <- as.numeric(proj$ecMaxContribution)
data_projects$totalCost <- sub(",", ".", proj$totalCost)
data_projects$totalCost <- as.numeric(proj$totalCost)
data_projects$ecMaxContribution <- sub(",", ".", proj$ecMaxContribution)
data_projects$ecMaxContribution <- as.numeric(proj$ecMaxContribution)
data_projects$totalCost <- sub(",", ".", data_projects$totalCost)
data_projects$totalCost <- as.numeric(data_projects$totalCost)
data_projects$ecMaxContribution <- sub(",", ".", data_projects$ecMaxContribution)
data_projects$ecMaxContribution <- as.numeric(data_projects$ecMaxContribution)
View(data_projects)
max_proj <- filter(data_projects, totalCost == max(mpg))%>%
select(rcn, id, acronym, status, programme, topics, frameworkProgramme, title, startDate,
endDate, projectUrl, objective, totalCost,
ecMaxContribution, call, fundingScheme,
coordinator, coordinatorCountry, participants,
participantCountries, subjects)
max_proj<- data_projects[which.max(data_projects$totalCost),]
View(max_proj)
max_proj_tle <- as.character( max_proj$title)
max_proj_tle
max_proj_perEU<- as.numeric(max_proj$ecMaxContribution)/as.numeric(max_proj$totalCost)
max_proj_perEU<- round(as.numeric(max_proj$ecMaxContribution)/as.numeric(max_proj$totalCost), digits = 2)
max_proj_perEU<- round(as.numeric(max_proj$ecMaxContribution)/as.numeric(max_proj$totalCost), digits = 4)
max_proj_perEU<- round(as.numeric(max_proj$ecMaxContribution)/as.numeric(max_proj$totalCost), digits = 4)*100
max_proj_tle <- as.character( max_proj$title)
max_proj_obj<- as.character( max_proj$objective)
max_proj_tocos<- as.character(max_proj$totalCost)
max_proj_obj
runApp()
runApp()
runApp()
library(knitr)
runApp()
runApp()
We found several key details in analyzing this dataset. The key finding is that the most expansive project was (`max_proj_tle`)
runApp()
setwd("~/Desktop/Info201HW/eu-project/eu-project")
source("/eu-project/eu-projectfunctions.R")
source("/eu-project/eu-project/functions.R")
source("eu-project/eu-project/functions.R")
source("/eu-project/functions.R")
source("eu-project/functions.R")
source("functions.R")
runApp()
runApp()
runApp()
runApp()
runApp()
## load necessary libraries
source("functions.R")
#source("/eu-project/eu-projectUFO_function.R")
#source("scripts/chart1.R")
runApp()
runApp()
runApp()
runApp()
runApp()
source("functions.R")
runApp()
msg <-"Does this work?"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rmarkdown)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("functions.R")
source("functions.R")
runApp()
runApp()
library("rsconnect", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/Info201HW/a8-app-LiamAlbright/my_server.R')
runApp('~/Desktop/Info201HW/a8-app-LiamAlbright/my_server.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
min_proj<- data_projects[which.min(data_projects$totalCost),]
View(min_proj)
View(data_projects)
min_proj<- data_projects[which.min(data_projects$totalCost),]
View(min_proj)
min_proj_tle <- as.character( min_proj$title)
min_proj_obj<- as.character( min_proj$objective)
min_proj_tocos<- as.character(min_proj$totalCost)
min_proj_perEU<- round(as.numeric(min_proj$ecMaxContribution)/as.numeric(min_proj$totalCost), digits = 4)*100
runApp()
sfs_proj<- proj_by_tag('sfs')
sfs_proj<- proj_by_tag('SFS')
View(sfs_proj)
eu_code(1)
eu_code[1]
get_aly_data_min <- function(df){
xvec<- vector(mode="character", length=4)
min_set<- df[which.min(df$totalCost),]
xvec[1] <- as.character( min_set$title)
xvec[2] <- as.character( min_set$objective)
xvec[3] <- as.character(min_set$totalCost)
xvec[4] <- round(as.numeric(min_set$ecMaxContribution)/as.numeric(min_set$totalCost), digits = 4)*100
}
sfs_min_aly <- get_aly_data_min(sfs_proj)
sfs_min_aly <- get_aly_data_min(sfs_proj)
sfs_min_aly <- get_aly_data_min(sfs_proj)
get_aly_data_min <- function(df){
xvec<- vector(mode="character", length=4)
min_set<- df[which.min(df$totalCost),]
xvec[1,] <- as.character( min_set$title)
xvec[2,] <- as.character( min_set$objective)
xvec[3,] <- as.character(min_set$totalCost)
xvec[4,] <- round(as.numeric(min_set$ecMaxContribution)/as.numeric(min_set$totalCost), digits = 4)*100
return(xvec)
}
sfs_min_aly <- get_aly_data_min(sfs_proj)
get_aly_data_min <- function(df){
xvec<- vector(mode="character", length=4)
min_set<- df[which.min(df$totalCost),]
val1 <- as.character( min_set$title)
val2 <- as.character( min_set$objective)
val3 <- as.character(min_set$totalCost)
val4 <- round(as.numeric(min_set$ecMaxContribution)/as.numeric(min_set$totalCost), digits = 4)*100
xvec= c(val1,val2,val3,val4)
return(xvec)
}
get_aly_data_min <- function(df){
#xvec<- vector(mode="character", length=4)
min_set<- df[which.min(df$totalCost),]
val1 <- as.character( min_set$title)
val2 <- as.character( min_set$objective)
val3 <- as.character(min_set$totalCost)
val4 <- round(as.numeric(min_set$ecMaxContribution)/as.numeric(min_set$totalCost), digits = 4)*100
xvec= c(val1,val2,val3,val4)
return(xvec)
}
sfs_min_aly <- get_aly_data_min(sfs_proj)
sfs_min_aly
50000/71429
sfs_max_aly <-get_aly_data_max(sfs_proj)
get_aly_data_max <- function(df){
max_set<- df[which.max(df$totalCost),]
val1 <- as.character( max_set$title)
val2 <- as.character( max_set$objective)
val3 <- as.character(max_set$totalCost)
val4 <- round(as.numeric(max_set$ecMaxContribution)/as.numeric(max_set$totalCost), digits = 4)*100
xvec= c(val1,val2,val3,val4)
return(xvec)
}
sfs_max_aly <-get_aly_data_max(sfs_proj)
runApp()
sfs_max_aly[2]
runApp()
sfs_max_aly[3]
runApp()
sfs_max_aly[3]
sfs_max_aly[4]
runApp()
runApp()
lc_proj <- proj_by_tag('LC')
View(lc_proj)
lc_max_aly <-get_aly_data_max(lc_proj)
lc_min_aly <-get_aly_data_min(lc_proj)
runApp()
runApp()
runApp()
View(proj_per)
shortDF<-data_projects
View(proj_per)
View(proj_per)
View(shortDF)
shortDF$topics <- strtrim(shortDF$topics, 3)
proj_per<- filter(shortDF,frameworkProgramme == "H2020") %>%
group_by(topics) %>%
count() %>%
ungroup() %>%
mutate(per=`n`/sum(`n`)) %>%
arrange(desc(topics))
View(proj_per)
shortDF$fundingScheme <- strtrim(shortDF$fundingScheme, 4)
fun_per<- filter(shortDF,frameworkProgramme == "H2020") %>%
group_by(fundingScheme) %>%
count() %>%
ungroup() %>%
mutate(per=`n`/sum(`n`)) %>%
arrange(desc(fundingScheme))
View(fun_per)
cor_per<- filter(shortDF,frameworkProgramme == "H2020") %>%
group_by(coordinatorCountry) %>%
count() %>%
ungroup() %>%
mutate(per=`n`/sum(`n`)) %>%
arrange(desc(coordinatorCountry))
View(cor_per)
runApp()
runApp()
runApp()
runApp('~/Desktop/Info201HW/a8-app-LiamAlbright/my_server.R')
